# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - run: npm ci
    
    - run: npm run build --if-present

    - name: Create .env file
      run: echo "${{ secrets.PROD_FULL_ENV_FILE }}" > .env
    
    - run: npm test

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
          context: .
          push: true
          tags: 22omar/store-api-node-express:latest

   # Deploy to your server
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.2.2
      with:
          host: ${{ secrets.AWS_SERVER_HOST }}
          username: ${{ secrets.AWS_SERVER_USER }}
          key: ${{ secrets.AWS_SERVER_SSH_KEY }}
          script: |
            cd ecommerce-api-nodejs-express
            git pull
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
            docker stack rm store-api-node-express-swarm
            docker stack deploy -c docker-compose.yml -c docker-compose.prod.yml store-api-node-express-swarm






      
